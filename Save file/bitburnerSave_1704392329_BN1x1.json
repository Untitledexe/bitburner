{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":19,\"max\":19},\"skills\":{\"hacking\":238,\"strength\":99,\"defense\":99,\"dexterity\":110,\"agility\":110,\"charisma\":99,\"intelligence\":0},\"exp\":{\"hacking\":361506.6012602445,\"strength\":10134.2240444397,\"defense\":10134.2240444397,\"dexterity\":14214.059698449877,\"agility\":14050.859472280046,\"charisma\":10124.647364501263,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.030304458142869,\"hacking_speed\":1.0718257278060268,\"hacking_money\":1.030304458142869,\"hacking_grow\":1.030304458142869,\"hacking\":1.1359106651025133,\"hacking_exp\":1.133334903957156,\"strength\":1.030304458142869,\"strength_exp\":1.133334903957156,\"defense\":1.030304458142869,\"defense_exp\":1.133334903957156,\"dexterity\":1.030304458142869,\"dexterity_exp\":1.133334903957156,\"agility\":1.030304458142869,\"agility_exp\":1.133334903957156,\"charisma\":1.030304458142869,\"charisma_exp\":1.133334903957156,\"hacknet_node_money\":1.030304458142869,\"hacknet_node_purchase_cost\":0.9705868902115661,\"hacknet_node_ram_cost\":0.9705868902115661,\"hacknet_node_core_cost\":0.9705868902115661,\"hacknet_node_level_cost\":0.9705868902115661,\"company_rep\":1.030304458142869,\"faction_rep\":1.030304458142869,\"work_money\":1.030304458142869,\"crime_success\":1.030304458142869,\"crime_money\":1.030304458142869,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"NiteSec\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9449.240768823607,\"onlineTimeSeconds\":65383.59999983376,\"ram\":64,\"totalMoneyGenerated\":125310370.9331672,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":4049.6746152101177,\"onlineTimeSeconds\":65086.19999983304,\"ram\":64,\"totalMoneyGenerated\":54854010.34305247,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":1346.880100225024,\"onlineTimeSeconds\":64500.19999983088,\"ram\":32,\"totalMoneyGenerated\":19761132.245318323,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":196,\"moneyGainRatePerSecond\":676.6387927532098,\"onlineTimeSeconds\":63919.79999982992,\"ram\":16,\"totalMoneyGenerated\":15407496.857691005,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":184,\"moneyGainRatePerSecond\":555.8104369044225,\"onlineTimeSeconds\":62825.19999982746,\"ram\":16,\"totalMoneyGenerated\":14694815.821379092,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":183,\"moneyGainRatePerSecond\":552.7897280082028,\"onlineTimeSeconds\":60979.799999829,\"ram\":16,\"totalMoneyGenerated\":14406015.954228356,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":183,\"moneyGainRatePerSecond\":552.7897280082028,\"onlineTimeSeconds\":57803.99999983112,\"ram\":16,\"totalMoneyGenerated\":13865690.318182612,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":183,\"moneyGainRatePerSecond\":552.7897280082028,\"onlineTimeSeconds\":12020.400000007943,\"ram\":16,\"totalMoneyGenerated\":4978227.391118587,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":183,\"moneyGainRatePerSecond\":552.7897280082028,\"onlineTimeSeconds\":11143.200000004887,\"ram\":16,\"totalMoneyGenerated\":4765736.336946041,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":182,\"moneyGainRatePerSecond\":549.7690191119831,\"onlineTimeSeconds\":9422.39999999855,\"ram\":16,\"totalMoneyGenerated\":4258365.957301459,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":182,\"moneyGainRatePerSecond\":549.7690191119831,\"onlineTimeSeconds\":6717.399999996281,\"ram\":16,\"totalMoneyGenerated\":3357477.7852281597,\"name\":\"hacknet-node-10\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-562.7075000000024,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":90036783.17057723,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-7200,\"codingcontract\":0,\"corporation\":0,\"crime\":431608961.778463,\"gang\":0,\"hacking\":2416815.0666035293,\"hacknet\":275659339.9438324,\"hacknet_expenses\":-619642246.6177448,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":90035670.17057721,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-543840,\"codingcontract\":0,\"corporation\":0,\"crime\":519060961.7784631,\"gang\":0,\"hacking\":7219037.973154702,\"hacknet\":407378485.46786684,\"hacknet_expenses\":-701432766.0343701,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":95209050.21410759,\"work\":83932.19999999854,\"servers\":-1009743.8720000001,\"other\":0,\"augmentations\":-135547017.3}},\"playtimeSinceLastAug\":65388400,\"playtimeSinceLastBitnode\":169040800,\"lastAugReset\":1704326940627,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":2431758.1312149037,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704224559631},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704224679624},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704229839619},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704230319623},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1704230679618},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704236319618},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704279654627},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1704279954635},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1704380141484},{\"ID\":\"FROZE\",\"unlockedOn\":1704392052448}],\"terminalCommandHistory\":[\"kill all\",\"ls\",\"rm a_money.js\",\"ls\",\"rm money.js\",\"rm n00dles.js\",\"rm node.js\",\"rm port.js\",\"rm r_money.js\",\"rm r_run.js\",\"rm ram.js\",\"rm scan.js\",\"rm start.js\",\"ls\",\"alias \\\"start=run scripts/start.js\\\"\",\"start\",\"scan- analyze 5\",\"scan-analyze 5\",\"port.js silverhelix\",\"connect silverhelix\",\"script/port.js\",\"script/port.js silverhelix\",\"scripts/port.js silverhelix\",\"scripts/port.js silver-helix\",\"hack\",\"home\",\"r_money.js silver-helix money.js\",\"scripts/r_money.js silver-helix money.js\",\"start\",\"connect n00dles\",\"hack\",\"grow\",\"hack\",\"weak\",\"weaken\",\"hack\",\"start\",\"scripts/node.js\",\"home\",\"start\",\"connect csec\",\"scan-analyze 5\",\"backdoor\",\"home\",\"alias \\\"start=run scriptsV2/CTRL.js\\\"\",\"alias\",\"unalias r\",\"unalias n\",\"alias\",\"ls scriptsV2\"],\"lastUpdate\":1704392329343,\"lastSave\":1704392201703,\"totalPlaytime\":169040800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":15178,\"factionWorkType\":\"hacking\",\"factionName\":\"CyberSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"189588b70be6ba\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"75.5.2.1\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"home\"}}],[\"scripts/node.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const MoneyFormat = '$0.0a';\\r\\nconst TimeFormat = '00:00:00';\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    /*\\r\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\r\\n    Winners don't use copyright\\r\\n    \\r\\n    Latest version of this script should be at\\r\\n        https://github.com/iuriguilherme/netscripts.d\\r\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\r\\n    \\r\\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\r\\n    \\r\\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\r\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\r\\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\r\\n    is upgraded. There is an option to set the budget limit.\\r\\n*/\\r\\n\\r\\n    // We will not buy anything if there's less money than this ammount\\r\\n    var reserveMoney = 0;\\r\\n    // Number of times to upgrade (shouldn't have to change this)\\r\\n    var n = 1;\\r\\n\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    ns.tail();\\r\\n\\r\\n    ns.print('Waiting to purchase next upgrade...');\\r\\n\\r\\n    // Buy first ns.hacknetNode if there are none\\r\\n    if (\\r\\n        ns.hacknet.numNodes() === 0 &&\\r\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\r\\n    ) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        displayDashBoard(ns);\\r\\n    }\\r\\n\\r\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\r\\n    while (ns.hacknet.numNodes() > 0) {\\r\\n        // If there is not enough money, we wait for it instead of ending the loop.\\r\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\r\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n                while (\\r\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeLevel(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeRam(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeCore(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\r\\n            /*\\r\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\r\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\r\\n                others don't, the loop above will still attempt to upgrade them all.\\r\\n            */\\r\\n            if (\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity\\r\\n            ) {\\r\\n                // Only buy nodes up to 23. Past that its not really worth it.\\r\\n                if (ns.hacknet.numNodes() < 23) {\\r\\n                    ns.hacknet.purchaseNode();\\r\\n\\r\\n                    displayDashBoard(ns);\\r\\n                }\\r\\n            } else if (\\r\\n                /*\\r\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\r\\n                than buying a new ns.hacknet Node.\\r\\n                */\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\r\\n            ) {\\r\\n                ns.hacknet.purchaseNode();\\r\\n\\r\\n                displayDashBoard(ns);\\r\\n            }\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n};\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction displayDashBoard(ns) {\\r\\n\\r\\n    ns.clearLog();\\r\\n    let nodes = Array(ns.hacknet.numNodes()).fill(0);\\r\\n    let maxNodes = ns.hacknet.numNodes() < 23 ? 23 : Infinity\\r\\n    ns.print(`Nodes: ${nodes.length} of ${maxNodes}`);\\r\\n    ns.print(`Total Production: ${nodes.length === 0 ? \\\"$0 /s\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).production).reduce((a, b) => a + b), MoneyFormat)} /s`)\\r\\n    ns.print(`Total Produced: ${nodes.length === 0 ? \\\"$0\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).totalProduction).reduce((a, b) => a + b), MoneyFormat)}`)\\r\\n    ns.print(table(\\r\\n        [\\\"Node\\\", \\\"Produced\\\", \\\"Uptime\\\", \\\"Production\\\", \\\"Lv\\\", \\\"RAM\\\", \\\"Cores\\\"],\\r\\n        nodes.map((v, i) => ns.hacknet.getNodeStats(i).name),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).totalProduction, MoneyFormat)),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).timeOnline, TimeFormat)),\\r\\n        nodes.map((v, i) => `${ns.nFormat(ns.hacknet.getNodeStats(i).production, MoneyFormat)} /s`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).level}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).ram}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cores}`),\\r\\n    ));\\r\\n}\\r\\n\\r\\nconst MaxReducer = (a, b) => a > b ? a : b;\\r\\n\\r\\n/**\\r\\n * Create a Table display of the provided data\\r\\n * @param {string[]} headers Column Headers\\r\\n * @param  {...string[]} columns Column data\\r\\n */\\r\\nfunction table(headers, ...columns) {\\r\\n    // Calculate Column Widths\\r\\n    let widths = [];\\r\\n    // for (let i = 0; i < columns.length; i++) {\\r\\n    //     widths[i] = columns[i].concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    // }\\r\\n    columns.forEach((c, i) => {\\r\\n        widths[i] = c.concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    });\\r\\n\\r\\n    let output = \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Headers\\r\\n    headers.forEach((h, i) => {\\r\\n        output += ` ${h.padEnd(widths[i], \\\" \\\")} |`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Separator\\r\\n    headers.forEach((h, i) => {\\r\\n        output += `${\\\"\\\".padEnd(widths[i] + 2, \\\"=\\\")}|`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    let rows = columns[0].length;\\r\\n    for (let row = 0; row < rows; row++) {\\r\\n        columns.forEach((c, i) => {\\r\\n            if (c[row] == \\\"-\\\") {\\r\\n                output += ` ${\\\"\\\".padEnd(widths[i], \\\"-\\\")} |`;\\r\\n            } else {\\r\\n                output += ` ${c[row].padEnd(widths[i], \\\" \\\")} |`;\\r\\n            }\\r\\n        });\\r\\n\\r\\n        output += \\\"\\\\n\\\";\\r\\n    }\\r\\n\\r\\n    return output;\\r\\n}\\r\\n\",\"filename\":\"scripts/node.js\",\"server\":\"home\"}}],[\"scripts/port.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let target = ns.args[0];\\r\\n\\r\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    ns.brutessh(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n    ns.ftpcrack(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n    ns.relaysmtp(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n    ns.httpworm(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n    ns.sqlinject(target);\\r\\n  }\\r\\n\\r\\n  ns.nuke(target);\\r\\n\\r\\n  ns.tprint(\\\"Nuke complete on \\\" + target + \\\".\\\");\\r\\n  ns.exec(\\\"r_money.js\\\", target)\\r\\n}\\r\\n\",\"filename\":\"scripts/port.js\",\"server\":\"home\"}}],[\"scripts/r_run.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const script = ns.args[0]\\r\\n    ns.kill(script)\\r\\n    ns.run(script)\\r\\n}\\r\\n\",\"filename\":\"scripts/r_run.js\",\"server\":\"home\"}}],[\"scripts/r_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const host = ns.args[0]\\r\\n  const script = \\\"scripts/money.js\\\"\\r\\n\\r\\n  if (!ns.serverExists(host)) {\\r\\n    ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\r\\n  ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads`);\\r\\n  await ns.scp(script, host);\\r\\n  ns.exec(script, host, threads, host);\\r\\n}\\r\\n\",\"filename\":\"scripts/r_money.js\",\"server\":\"home\"}}],[\"scripts/start.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.run(\\\"scripts/a_money.js\\\")\\r\\n    ns.run(\\\"scripts/node.js\\\")\\r\\n}\\r\\n\",\"filename\":\"scripts/start.js\",\"server\":\"home\"}}],[\"scripts/a_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n  const children = ns.scan(server);\\r\\n  for (let child of children) {\\r\\n    if (parent == child) {\\r\\n      continue;\\r\\n    }\\r\\n    list.push(child);\\r\\n\\r\\n    scan(ns, server, child, list);\\r\\n  }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n  const list = [];\\r\\n  scan(ns, '', 'home', list);\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  while (true) {\\r\\n    let file = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n      file = 1\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n      file = 2\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n      file = 3\\r\\n    }\\r\\n\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n      file = 4\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n      file = 5\\r\\n    }\\r\\n\\r\\n    const serversRoot = list_servers(ns).filter(s => !ns.hasRootAccess(s));\\r\\n    let sRootLen = serversRoot.length;\\r\\n    for (let i = 0; i < sRootLen; i++) {\\r\\n      let maxLevel = ns.getHackingLevel();\\r\\n      let serverLevel = ns.getServerRequiredHackingLevel(serversRoot[i]);\\r\\n      let ports = ns.getServerNumPortsRequired(serversRoot[i]);\\r\\n      if (serverLevel <= maxLevel) {\\r\\n        if (ports <= file) {\\r\\n          ns.run(\\\"scripts/port.js\\\",1, serversRoot[i])\\r\\n        }\\r\\n        else if (serversRoot[i]!= \\\"darkweb\\\"){\\r\\n          ns.tprint(\\\"You require a new program\\\")\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const serversRam = list_servers(ns).filter(s => ns.hasRootAccess(s));\\r\\n    let sRamLen = serversRam.length;\\r\\n    for (let i = 0; i < sRamLen; i++) {\\r\\n      let serversMaxRam = ns.getServerMaxRam(serversRam[i]);\\r\\n      let serversCurRam = ns.getServerUsedRam(serversRam[i])\\r\\n      if ((serversMaxRam-serversCurRam)>2.4) {\\r\\n        ns.run(\\\"scripts/r_money.js\\\", 1, serversRam[i])\\r\\n      }\\r\\n    }\\r\\n    await (ns.sleep(10000))\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/a_money.js\",\"server\":\"home\"}}],[\"scriptsV1/a_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n  const children = ns.scan(server);\\r\\n  for (let child of children) {\\r\\n    if (parent == child) {\\r\\n      continue;\\r\\n    }\\r\\n    list.push(child);\\r\\n\\r\\n    scan(ns, server, child, list);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction list_servers(ns) {\\r\\n  const list = [];\\r\\n  scan(ns, '', 'home', list);\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  while (true) {\\r\\n    let file = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n      file = 1\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n      file = 2\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n      file = 3\\r\\n    }\\r\\n\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n      file = 4\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n      file = 5\\r\\n    }\\r\\n\\r\\n    const serversRoot = list_servers(ns).filter(s => !ns.hasRootAccess(s));\\r\\n    let sRootLen = serversRoot.length;\\r\\n    for (let i = 0; i < sRootLen; i++) {\\r\\n      let maxLevel = ns.getHackingLevel();\\r\\n      let serverLevel = ns.getServerRequiredHackingLevel(serversRoot[i]);\\r\\n      let ports = ns.getServerNumPortsRequired(serversRoot[i]);\\r\\n      if (serverLevel <= maxLevel) {\\r\\n        if (ports <= file) {\\r\\n          ns.run(\\\"scripts/port.js\\\",1, serversRoot[i])\\r\\n        }\\r\\n        else if (serversRoot[i]!= \\\"darkweb\\\"){\\r\\n          ns.tprint(\\\"You require a new program\\\")\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const serversRam = list_servers(ns).filter(s => ns.hasRootAccess(s));\\r\\n    let sRamLen = serversRam.length;\\r\\n    for (let i = 0; i < sRamLen; i++) {\\r\\n      let serversMaxRam = ns.getServerMaxRam(serversRam[i]);\\r\\n      let serversCurRam = ns.getServerUsedRam(serversRam[i])\\r\\n      if ((serversMaxRam-serversCurRam)>2.4) {\\r\\n        ns.run(\\\"scripts/r_money.js\\\", 1, serversRam[i])\\r\\n      }\\r\\n    }\\r\\n    await (ns.sleep(10000))\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/a_money.js\",\"server\":\"home\"}}],[\"scriptsV1/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/money.js\",\"server\":\"home\"}}],[\"scriptsV1/node.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const MoneyFormat = '$0.0a';\\r\\nconst TimeFormat = '00:00:00';\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    /*\\r\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\r\\n    Winners don't use copyright\\r\\n    \\r\\n    Latest version of this script should be at\\r\\n        https://github.com/iuriguilherme/netscripts.d\\r\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\r\\n    \\r\\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\r\\n    \\r\\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\r\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\r\\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\r\\n    is upgraded. There is an option to set the budget limit.\\r\\n*/\\r\\n\\r\\n    // We will not buy anything if there's less money than this ammount\\r\\n    var reserveMoney = 0;\\r\\n    // Number of times to upgrade (shouldn't have to change this)\\r\\n    var n = 1;\\r\\n\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    ns.tail();\\r\\n\\r\\n    ns.print('Waiting to purchase next upgrade...');\\r\\n\\r\\n    // Buy first ns.hacknetNode if there are none\\r\\n    if (\\r\\n        ns.hacknet.numNodes() === 0 &&\\r\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\r\\n    ) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        displayDashBoard(ns);\\r\\n    }\\r\\n\\r\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\r\\n    while (ns.hacknet.numNodes() > 0) {\\r\\n        // If there is not enough money, we wait for it instead of ending the loop.\\r\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\r\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n                while (\\r\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeLevel(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeRam(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeCore(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\r\\n            /*\\r\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\r\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\r\\n                others don't, the loop above will still attempt to upgrade them all.\\r\\n            */\\r\\n            if (\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity\\r\\n            ) {\\r\\n                // Only buy nodes up to 23. Past that its not really worth it.\\r\\n                if (ns.hacknet.numNodes() < 23) {\\r\\n                    ns.hacknet.purchaseNode();\\r\\n\\r\\n                    displayDashBoard(ns);\\r\\n                }\\r\\n            } else if (\\r\\n                /*\\r\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\r\\n                than buying a new ns.hacknet Node.\\r\\n                */\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\r\\n            ) {\\r\\n                ns.hacknet.purchaseNode();\\r\\n\\r\\n                displayDashBoard(ns);\\r\\n            }\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n};\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction displayDashBoard(ns) {\\r\\n\\r\\n    ns.clearLog();\\r\\n    let nodes = Array(ns.hacknet.numNodes()).fill(0);\\r\\n    let maxNodes = ns.hacknet.numNodes() < 23 ? 23 : Infinity\\r\\n    ns.print(`Nodes: ${nodes.length} of ${maxNodes}`);\\r\\n    ns.print(`Total Production: ${nodes.length === 0 ? \\\"$0 /s\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).production).reduce((a, b) => a + b), MoneyFormat)} /s`)\\r\\n    ns.print(`Total Produced: ${nodes.length === 0 ? \\\"$0\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).totalProduction).reduce((a, b) => a + b), MoneyFormat)}`)\\r\\n    ns.print(table(\\r\\n        [\\\"Node\\\", \\\"Produced\\\", \\\"Uptime\\\", \\\"Production\\\", \\\"Lv\\\", \\\"RAM\\\", \\\"Cores\\\"],\\r\\n        nodes.map((v, i) => ns.hacknet.getNodeStats(i).name),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).totalProduction, MoneyFormat)),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).timeOnline, TimeFormat)),\\r\\n        nodes.map((v, i) => `${ns.nFormat(ns.hacknet.getNodeStats(i).production, MoneyFormat)} /s`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).level}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).ram}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cores}`),\\r\\n    ));\\r\\n}\\r\\n\\r\\nconst MaxReducer = (a, b) => a > b ? a : b;\\r\\n\\r\\n/**\\r\\n * Create a Table display of the provided data\\r\\n * @param {string[]} headers Column Headers\\r\\n * @param  {...string[]} columns Column data\\r\\n */\\r\\nfunction table(headers, ...columns) {\\r\\n    // Calculate Column Widths\\r\\n    let widths = [];\\r\\n    // for (let i = 0; i < columns.length; i++) {\\r\\n    //     widths[i] = columns[i].concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    // }\\r\\n    columns.forEach((c, i) => {\\r\\n        widths[i] = c.concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    });\\r\\n\\r\\n    let output = \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Headers\\r\\n    headers.forEach((h, i) => {\\r\\n        output += ` ${h.padEnd(widths[i], \\\" \\\")} |`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Separator\\r\\n    headers.forEach((h, i) => {\\r\\n        output += `${\\\"\\\".padEnd(widths[i] + 2, \\\"=\\\")}|`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    let rows = columns[0].length;\\r\\n    for (let row = 0; row < rows; row++) {\\r\\n        columns.forEach((c, i) => {\\r\\n            if (c[row] == \\\"-\\\") {\\r\\n                output += ` ${\\\"\\\".padEnd(widths[i], \\\"-\\\")} |`;\\r\\n            } else {\\r\\n                output += ` ${c[row].padEnd(widths[i], \\\" \\\")} |`;\\r\\n            }\\r\\n        });\\r\\n\\r\\n        output += \\\"\\\\n\\\";\\r\\n    }\\r\\n\\r\\n    return output;\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/node.js\",\"server\":\"home\"}}],[\"scriptsV1/port.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let target = ns.args[0];\\r\\n\\r\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    ns.brutessh(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n    ns.ftpcrack(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n    ns.relaysmtp(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n    ns.httpworm(target);\\r\\n  }\\r\\n\\r\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n    ns.sqlinject(target);\\r\\n  }\\r\\n\\r\\n  ns.nuke(target);\\r\\n\\r\\n  ns.tprint(\\\"Nuke complete on \\\" + target + \\\".\\\");\\r\\n  ns.exec(\\\"r_money.js\\\", target)\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/port.js\",\"server\":\"home\"}}],[\"scriptsV1/r_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const host = ns.args[0]\\r\\n  const script = \\\"scripts/money.js\\\"\\r\\n\\r\\n  if (!ns.serverExists(host)) {\\r\\n    ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\r\\n  ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads`);\\r\\n  await ns.scp(script, host);\\r\\n  ns.exec(script, host, threads, host);\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/r_money.js\",\"server\":\"home\"}}],[\"scriptsV1/r_run.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const script = ns.args[0]\\r\\n    ns.kill(script)\\r\\n    ns.run(script)\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/r_run.js\",\"server\":\"home\"}}],[\"scriptsV1/start.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.run(\\\"scripts/a_money.js\\\")\\r\\n    ns.run(\\\"scripts/node.js\\\")\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/start.js\",\"server\":\"home\"}}],[\"scriptsV1/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const target = args[0];\\r\\n    ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"scriptsV1/weaken.js\",\"server\":\"home\"}}],[\"scriptsV2/a_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n  const children = ns.scan(server);\\r\\n  for (let child of children) {\\r\\n    if (parent == child) {\\r\\n      continue;\\r\\n    }\\r\\n    list.push(child);\\r\\n\\r\\n    scan(ns, server, child, list);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction list_servers(ns) {\\r\\n  const list = [];\\r\\n  scan(ns, '', 'home', list);\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  while (true) {\\r\\n    const host = list_servers(ns).filter(s => ns.hasRootAccess(s));\\r\\n    const hLen = host.length;\\r\\n    const hackedHosts = [\\\"n00dles\\\"]\\r\\n    for (let i = 0; i < hLen; i++) {\\r\\n      if (!hackedHosts.includes(host[i])) {\\r\\n        ns.tprint(`Hacking new server ${host[i]}.`)\\r\\n        ns.run(\\\"scriptsV2/r_money.js\\\", 1, host[i])\\r\\n        hackedHosts.push(host[i])\\r\\n      }\\r\\n    }\\r\\n    await (ns.sleep(60000))\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"filename\":\"scriptsV2/a_money.js\",\"server\":\"home\"}}],[\"scriptsV2/CTRL.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    while(true){\\r\\n        if(!ns.scriptRunning(\\\"scriptsV2/a_money.js\\\",\\\"home\\\")){\\r\\n            ns.run(\\\"scriptsV2/a_money.js\\\")\\r\\n        }\\r\\n        if(!ns.scriptRunning(\\\"scriptsV2/node.js\\\",\\\"home\\\")){\\r\\n            ns.run(\\\"scriptsV2/node.js\\\",1,0)\\r\\n        }\\r\\n        if(!ns.scriptRunning(\\\"scriptsV2/root.js\\\",\\\"home\\\")){\\r\\n            ns.run(\\\"scriptsV2/root.js\\\")\\r\\n        }\\r\\n        await(ns.sleep(60000))    \\r\\n    }\\r\\n}\",\"filename\":\"scriptsV2/CTRL.js\",\"server\":\"home\"}}],[\"scriptsV2/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    await(ns.grow(target));\\r\\n}\\r\\n\",\"filename\":\"scriptsV2/grow.js\",\"server\":\"home\"}}],[\"scriptsV2/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    await(ns.hack(target));\\r\\n}\\r\\n\",\"filename\":\"scriptsV2/hack.js\",\"server\":\"home\"}}],[\"scriptsV2/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.getHostname();\\r\\n    let hackTime = ns.getHackTime(host);\\r\\n    let growTime = ns.getGrowTime(host);\\r\\n    let weakenTime = ns.getWeakenTime(host);\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n      if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n        let script = \\\"scriptsV2/weaken.js\\\";\\r\\n        let threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\r\\n        await ns.exec(script,host,threads,host);\\r\\n        await ns.sleep(weakenTime)\\r\\n      }\\r\\n  \\r\\n      else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n        let script = \\\"scriptsV2/grow.js\\\";\\r\\n        let threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\r\\n        await ns.exec(script,host,threads,host);\\r\\n        await ns.sleep(growTime);\\r\\n      }\\r\\n  \\r\\n      else {\\r\\n        let script = \\\"scriptsV2/hack.js\\\";\\r\\n        let threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\r\\n        await ns.exec(script,host,threads,host);\\r\\n        await ns.sleep(hackTime);\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n  \\r\\n  \",\"filename\":\"scriptsV2/money.js\",\"server\":\"home\"}}],[\"scriptsV2/node.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const MoneyFormat = '$0.0a';\\r\\nconst TimeFormat = '00:00:00';\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    /*\\r\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\r\\n    Winners don't use copyright\\r\\n    \\r\\n    Latest version of this script should be at\\r\\n        https://github.com/iuriguilherme/netscripts.d\\r\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\r\\n    \\r\\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\r\\n    \\r\\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\r\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\r\\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\r\\n    is upgraded. There is an option to set the budget limit.\\r\\n*/\\r\\n\\r\\n    // We will not buy anything if there's less money than this ammount\\r\\n    let reserveMoney = ns.args[0];\\r\\n    // Number of times to upgrade (shouldn't have to change this)\\r\\n    var n = 1;\\r\\n\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    ns.tail();\\r\\n\\r\\n    ns.print('Waiting to purchase next upgrade...');\\r\\n\\r\\n    // Buy first ns.hacknetNode if there are none\\r\\n    if (\\r\\n        ns.hacknet.numNodes() === 0 &&\\r\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\r\\n    ) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        displayDashBoard(ns);\\r\\n    }\\r\\n\\r\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\r\\n    while (ns.hacknet.numNodes() > 0) {\\r\\n        // If there is not enough money, we wait for it instead of ending the loop.\\r\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\r\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n                while (\\r\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeLevel(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeRam(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                while (\\r\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\r\\n                    ns.hacknet.upgradeCore(i, n)\\r\\n                ) {\\r\\n                    displayDashBoard(ns);\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\r\\n            /*\\r\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\r\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\r\\n                others don't, the loop above will still attempt to upgrade them all.\\r\\n            */\\r\\n            if (\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity\\r\\n            ) {\\r\\n                // Only buy nodes up to 23. Past that its not really worth it.\\r\\n                if (ns.hacknet.numNodes() < 23) {\\r\\n                    ns.hacknet.purchaseNode();\\r\\n\\r\\n                    displayDashBoard(ns);\\r\\n                }\\r\\n            } else if (\\r\\n                /*\\r\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\r\\n                than buying a new ns.hacknet Node.\\r\\n                */\\r\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\r\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\r\\n            ) {\\r\\n                ns.hacknet.purchaseNode();\\r\\n\\r\\n                displayDashBoard(ns);\\r\\n            }\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n};\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction displayDashBoard(ns) {\\r\\n\\r\\n    ns.clearLog();\\r\\n    let nodes = Array(ns.hacknet.numNodes()).fill(0);\\r\\n    let maxNodes = ns.hacknet.numNodes() < 23 ? 23 : Infinity\\r\\n    ns.print(`Nodes: ${nodes.length} of ${maxNodes}`);\\r\\n    ns.print(`Total Production: ${nodes.length === 0 ? \\\"$0 /s\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).production).reduce((a, b) => a + b), MoneyFormat)} /s`)\\r\\n    ns.print(`Total Produced: ${nodes.length === 0 ? \\\"$0\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).totalProduction).reduce((a, b) => a + b), MoneyFormat)}`)\\r\\n    ns.print(table(\\r\\n        [\\\"Node\\\", \\\"Produced\\\", \\\"Uptime\\\", \\\"Production\\\", \\\"Lv\\\", \\\"RAM\\\", \\\"Cores\\\"],\\r\\n        nodes.map((v, i) => ns.hacknet.getNodeStats(i).name),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).totalProduction, MoneyFormat)),\\r\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).timeOnline, TimeFormat)),\\r\\n        nodes.map((v, i) => `${ns.nFormat(ns.hacknet.getNodeStats(i).production, MoneyFormat)} /s`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).level}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).ram}`),\\r\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cores}`),\\r\\n    ));\\r\\n}\\r\\n\\r\\nconst MaxReducer = (a, b) => a > b ? a : b;\\r\\n\\r\\n/**\\r\\n * Create a Table display of the provided data\\r\\n * @param {string[]} headers Column Headers\\r\\n * @param  {...string[]} columns Column data\\r\\n */\\r\\nfunction table(headers, ...columns) {\\r\\n    // Calculate Column Widths\\r\\n    let widths = [];\\r\\n    // for (let i = 0; i < columns.length; i++) {\\r\\n    //     widths[i] = columns[i].concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    // }\\r\\n    columns.forEach((c, i) => {\\r\\n        widths[i] = c.concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\r\\n    });\\r\\n\\r\\n    let output = \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Headers\\r\\n    headers.forEach((h, i) => {\\r\\n        output += ` ${h.padEnd(widths[i], \\\" \\\")} |`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    // Write Separator\\r\\n    headers.forEach((h, i) => {\\r\\n        output += `${\\\"\\\".padEnd(widths[i] + 2, \\\"=\\\")}|`;\\r\\n    });\\r\\n\\r\\n    output += \\\"\\\\n\\\";\\r\\n\\r\\n    let rows = columns[0].length;\\r\\n    for (let row = 0; row < rows; row++) {\\r\\n        columns.forEach((c, i) => {\\r\\n            if (c[row] == \\\"-\\\") {\\r\\n                output += ` ${\\\"\\\".padEnd(widths[i], \\\"-\\\")} |`;\\r\\n            } else {\\r\\n                output += ` ${c[row].padEnd(widths[i], \\\" \\\")} |`;\\r\\n            }\\r\\n        });\\r\\n\\r\\n        output += \\\"\\\\n\\\";\\r\\n    }\\r\\n\\r\\n    return output;\\r\\n}\\r\\n\",\"filename\":\"scriptsV2/node.js\",\"server\":\"home\"}}],[\"scriptsV2/r_money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const host = ns.args[0];\\r\\n  \\r\\n    //ns.tprint(`Launching money script on server '${host}'`);\\r\\n    ns.scp(\\\"scriptsV2/grow.js\\\", host);\\r\\n    ns.scp(\\\"scriptsV2/hack.js\\\", host);\\r\\n    ns.scp(\\\"scriptsV2/weaken.js\\\", host);\\r\\n    ns.scp(\\\"scriptsV2/money.js\\\", host);\\r\\n\\r\\n    ns.exec(\\\"scriptsV2/money.js\\\",host);\\r\\n  }\\r\\n  \",\"filename\":\"scriptsV2/r_money.js\",\"server\":\"home\"}}],[\"scriptsV2/save.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let amount = ns.args[0];\\r\\n    ns.scriptKill(\\\"scriptsV2/node.js\\\",\\\"home\\\")\\r\\n    ns.run(\\\"scriptsV2/node.js\\\",1,amount)\\r\\n}\",\"filename\":\"scriptsV2/save.js\",\"server\":\"home\"}}],[\"scriptsV2/root.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n  const children = ns.scan(server);\\r\\n  for (let child of children) {\\r\\n    if (parent == child) {\\r\\n      continue;\\r\\n    }\\r\\n    list.push(child);\\r\\n\\r\\n    scan(ns, server, child, list);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction list_servers(ns) {\\r\\n  const list = [];\\r\\n  scan(ns, '', 'home', list);\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  while (true) {\\r\\n    const port = list_servers(ns).filter(s => !ns.hasRootAccess(s));\\r\\n    let pLen = port.length;\\r\\n    for (let i = 0; i < pLen; i++) {\\r\\n      let maxLevel = ns.getHackingLevel();\\r\\n      let serverLevel = ns.getServerRequiredHackingLevel(port[i]);\\r\\n      let ports = ns.getServerNumPortsRequired(port[i]);\\r\\n      if (serverLevel <= maxLevel) {\\r\\n        var openPorts = 0;\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n          ns.brutessh(port[i]);\\r\\n          var openPorts = 1;\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n          ns.ftpcrack(port[i]);\\r\\n          var openPorts = 2;\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n          ns.relaysmtp(port[i]);\\r\\n          var openPorts = 3;\\r\\n        }\\r\\n        \\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n          ns.httpworm(port[i]);\\r\\n          var openPorts = 4;\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n          ns.sqlinject(port[i]);\\r\\n          var openPorts = 5;\\r\\n        }\\r\\n        \\r\\n        if(openPorts >= ports){\\r\\n          ns.nuke(port[i]);\\r\\n          ns.tprint(\\\"Nuke complete on \\\" + port[i] + \\\".\\\");\\r\\n        }\\r\\n\\r\\n        await (ns.sleep(10000))\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n     \\r\\n\",\"filename\":\"scriptsV2/root.js\",\"server\":\"home\"}}],[\"scriptsV2/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    await(ns.weaken(target));\\r\\n}\\r\\n\",\"filename\":\"scriptsV2/weaken.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"87.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38122858229,\"moneyMax\":953071455725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1261,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631294.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[9,71,35,7,4,60,41,143,25,70,124,12,5,157,34,95,167,99,134,3,5,96,159,11,133,11,189,199,26,14,28,67,2,65,111,109,145,130,39,185,16,152],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"14.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46932964287,\"moneyMax\":1173324107175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1205,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106286.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":635181693,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"68.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":29489992586,\"moneyMax\":737249814650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":983,\"serverGrowth\":75,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"71.3.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":17743852117,\"moneyMax\":443596302925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1128,\"serverGrowth\":61,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"94.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38455644510,\"moneyMax\":961391112750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1137,\"serverGrowth\":88,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264938.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[198,71,175,19,14,81,90,88,85,23,22,181,40,72,111,106,28,82,133,131,54,142,30,99,20,71,39,82,21,137]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932149-Sector12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[9,5],[2,2,3],[9,7,6,1],[5,9,9,6,8]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"67.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":23534014779,\"moneyMax\":588350369475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"5.0.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":21741176074,\"moneyMax\":543529401850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"44.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":16859581479,\"moneyMax\":421489536975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":81,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"52.4.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":20400833401,\"moneyMax\":510020835025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1155,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"45.4.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1465962447,\"moneyMax\":36649061175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1114,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986924.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[42,196,196,62,95,18,114,156,135,39,48,92,124,145,166,150,77,100,174,174,192,180,101,190,131,31,129,105,183,123,79,74,120,117,48,114,120,31,73,102],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"96.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1282,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"75.0.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1100531255,\"moneyMax\":27513281375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":81,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182495.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,12],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"68.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":811451130,\"moneyMax\":20286278250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":53,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"84.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":824731165,\"moneyMax\":20618279125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":929,\"serverGrowth\":41,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"47.0.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":623359051,\"moneyMax\":15583976275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":71,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590263-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,3,7,7,0,6,4],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"79.3.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":799644452,\"moneyMax\":19991111300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":64,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625372.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,10],[5,12],[6,9],[11,18],[10,16],[21,30],[20,22],[10,20],[20,29],[21,29],[17,23],[24,34],[22,30],[24,28],[12,22],[19,24],[16,24],[12,17],[3,11]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"51.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":983840989,\"moneyMax\":24596024725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-102571-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,5],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"63.2.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1152138862,\"moneyMax\":28803471550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":86,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"46.4.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":773590175,\"moneyMax\":19339754375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":64,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-894400.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[134,102,130,51,141,72,29,105,95,183,49,165,6,5,150,1,66,189,190,86,15,27,120,89,77,104,100,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"88.0.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":671488668,\"moneyMax\":16787216700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":83,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-378748.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,21],[10,12],[21,24],[11,12],[24,32],[16,20],[16,18],[9,19],[3,6],[15,19],[8,15],[23,26],[1,11],[17,22],[22,30],[21,25],[10,13]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"60.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":838806903,\"moneyMax\":20970172575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"20.0.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":784683167,\"moneyMax\":19617079175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":89,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161405-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[149,[2,3,8,10,11,15,17,18]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"6.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1122217021,\"moneyMax\":28055425525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"13.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":922376022,\"moneyMax\":23059400550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":70,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"77.0.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1035262317,\"moneyMax\":25881557925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"91.3.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":928797286,\"moneyMax\":23219932150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994869.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,4,1,-10,-10,-4,8,0,-1,-7,10,8,-8,8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"42.9.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":803175132,\"moneyMax\":20079378300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":72,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"71.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1622756450,\"moneyMax\":40568911250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":57,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356530-Netburners.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,3,0,4,5,3,3,1,1,3],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"15.5.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1722404945,\"moneyMax\":43060123625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":81,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311037.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[86,40,87,85,11,64,127,141,72,44,58,76,141,178,8,146,167,158,116,78,112,170,32,160],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"22.6.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":1153947952,\"moneyMax\":28848698800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":77,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"26.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1431453100,\"moneyMax\":35786327500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"57.0.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1032459735,\"moneyMax\":25811493375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"0.3.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":789420513,\"moneyMax\":19735512825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":692,\"serverGrowth\":61,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"67.4.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":645253866,\"moneyMax\":16131346650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":491,\"serverGrowth\":60,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"79.1.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":630097060,\"moneyMax\":15752426500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"43.3.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":284393359,\"moneyMax\":7109833975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":32,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"1.5.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":179987008,\"moneyMax\":4499675200,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":404,\"serverGrowth\":35,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"6.3.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":940274309,\"moneyMax\":23506857725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":727,\"serverGrowth\":83,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.4.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":319611947,\"moneyMax\":7990298675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":47,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998637.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"fBeAFVj5G0ajFVj5GG0ajFVj5Gh5Gh5Gh5GokJyHu7JyHu7JyHyHyHGERxCMGERxCMGqWKQRxCMGqWKl3POKs\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"80.6.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":524690551,\"moneyMax\":13117263775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":565,\"serverGrowth\":66,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"2.4.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":405611078,\"moneyMax\":10140276950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":426,\"serverGrowth\":27,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"41.2.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":170270868,\"moneyMax\":4256771700,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":279,\"serverGrowth\":48,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"35.6.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":233278020,\"moneyMax\":5831950500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":301,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-341466.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[2,7],[2,5,2],[6,8,6,5],[5,7,6,9,5],[9,2,5,6,7,8],[2,5,9,6,3,5,4],[7,1,3,4,3,2,1,8],[9,1,5,9,6,1,1,3,8],[9,7,3,1,2,4,4,1,7,8],[9,7,2,6,4,3,7,5,3,7,4],[6,6,1,3,4,5,3,3,9,3,5,2]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643746.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[87,169,90,36,106],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-461750.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ppddooUqVVVVVV311GGGGGGBBBBBXXXXXXXXX66uuaaZZ00000LLBBBBBBkkG1VVVVVVVVVVVVnWqqqqqqqqqqZZZZZZZZZZ\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"2.8.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":381,\"serverGrowth\":66,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"45.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":82611395,\"moneyMax\":2065284875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":257,\"serverGrowth\":47,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"31.2.6.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"18.7.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":3188875.512378113,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-894218.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ZZZZZDMSS333333EG66jjjjjjjjjjjjjj66WW6dhhMMrrrrrrrrrr3333333CCCCCCCCCCCepuu771ppWW11111111\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"32.9.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":5451004.239525844,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"35.9.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":9543460.483350975,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"15.1.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":18420440.404819425,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"35.2.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":6969158.469139866,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"4.0.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.052,\"minDifficulty\":8,\"moneyAvailable\":10697481.004909642,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-875952-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,1,0],[0,0,0,0,0,0,0],[1,0,0,1,0,0,0],[0,0,0,0,0,0,1],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[0,1,0,0,0,1,0],[0,0,1,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"51.5.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.104,\"minDifficulty\":10,\"moneyAvailable\":78284730.55579557,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"43.0.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":6720935.6179683935,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671373.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"2ic315KR64j4114891F8388oG6Rwqn513C4n97145906492LcTNVw5J06IMDTY8218YGOEN6CY\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-788942-Netburners.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"kkQQZZZZnn66uuuuuuuuuwwhhdQUUUUUccccffffffffffffff66XXXXXeeeeeeeeee\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-466116.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"8.6.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":14327557.579429075,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"43.0.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":48538904.11778188,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388628.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,1,0],[0,0,0,0,1],[0,1,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-666903-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,9],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"87.7.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.052,\"minDifficulty\":5,\"moneyAvailable\":27067678.773033854,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"72.7.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":26.500000000000014,\"minDifficulty\":11,\"moneyAvailable\":63978061,\"moneyMax\":1599451525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":210,\"serverGrowth\":33,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"56.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":46300906,\"moneyMax\":1157522650,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":265,\"serverGrowth\":31,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"46.1.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":25649006.979588717,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323968.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"uudRRwwYaaaaaaaaaaaa5555555555555ffffffffffbbbbbppppppmRPP\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"64.6.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":34,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"57.0.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1058,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-698414.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MODEM QUEUE FRAME ARRAY INBOX\",6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"30.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":748,\"serverGrowth\":55,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"86.9.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":528,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.5.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":344,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"40.6.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"78.6.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":517,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154490.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1054088333415620,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.8.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n  const host = ns.args[0]\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host)) {\\r\\n      await ns.weaken(host);\\r\\n    }\\r\\n\\r\\n    else if (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\r\\n      await ns.grow(host);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      await ns.hack(host);\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"scripts/money.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.006,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701241.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":392817701,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"83.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"3.5.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"19.2.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.2897,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0.5818,\"discovery\":\"known\",\"playerReputation\":150.5188954641848}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1.2891,\"discovery\":\"known\",\"playerReputation\":173.18559354332723}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":12.4051,\"discovery\":\"known\",\"playerReputation\":2539.399983854544}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":58.7991,\"discovery\":\"known\",\"playerReputation\":6053.463917230107}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}}}","AliasesSave":"{\"start\":\"run scriptsV2/CTRL.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"0","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}